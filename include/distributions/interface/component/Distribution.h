/**
 * @file
 * @author University of Warwick
 * @version 1.0
 *
 * @section LICENSE
 *
 * @section DESCRIPTION
 *
 * Description
 *
 * Contains declarations for the Distribution Class
 */

#ifndef CUPCFD_DISTRIBUTIONS_DISTRIBUTION_INCLUDE_H
#define CUPCFD_DISTRIBUTIONS_DISTRIBUTION_INCLUDE_H

// Error Codes
#include "Error.h"

namespace cupcfd
{
	namespace distributions
	{
		/**
		 * An interface class to retrieve random data elements
		 * from a distribution.
		 *
		 * @tparam I The type of the index scheme.
		 * @tparam T The type of the values generated by the distribution.
		 */
		template <class I, class T>
		class Distribution
		{
			public:
				// === Members ===

				// === Constructors/Deconstructors

				/**
				 * Default Constructor
				 */
				Distribution();

				/**
				 * Deconstructor
				 */
				virtual ~Distribution();

				// === Concrete Methods ===

				// === Pure Virtual Methods ===

				/**
				 * Get a set of the next values from a distribution.
				 * The nature of these values will depend on their distribution (e.g.
				 * level of randomness)
				 *
				 * @param values The array to store the distribution values in.
				 * @param nValues The size of values in the number of elements of type T.
				 *
				 * @tparam I The type of the index scheme.
				 * @tparam T The type of the values generated by the distribution.
				 *
				 * @return An error status indicating the success or failure of the operation
				 * @retval cupcfd::error::E_SUCCESS Success
				 */
				virtual void getValues(T * values, I nValues) = 0;

				/**
				 * Clones the current object to create a new object
				 *
				 * @return A pointer to a cloned copy of this object
				 */
				__attribute__((warn_unused_result))
				virtual Distribution<I,T> * clone() = 0;
		};
	}
}

// Include Header Level Definitions
#include "Distribution.ipp"

#endif
